{"version":3,"sources":["config.js","serviceWorker.js","TextBlock.js","Welcome.js","helpers.js","Canvas.js","GameContext.js","GameText.js","hooks.js","Timer.js","StartGameButton.js","Game.js","NavButton.js","Score.js","GameEngine.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","TextBlock","this","props","strings","typeSpeed","options","backSpeed","showCursor","onComplete","self","cursor","style","display","typed","Typed","el","destroy","className","ref","React","Component","Welcome","text","welcome","getPrediction","theCanvas","model","canvas","tensor","current","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","prediction","a","CreateRoundList","size","list","Array","i","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","Canvas","forwardRef","lastX","lastY","mouseDown","useEffect","context","getContext","fillStyle","fillRect","height","width","onMouseDown","onMouseUp","undefined","newPrediction","labels","win","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","onClick","GameContext","createContext","GameText","Consumer","testStr","points","round","config","draw","replace","question","toUpperCase","useTimer","max","timeUp","useState","count","setCount","isActive","setIsActive","intervalID","setInterval","clearInterval","genericReducer","state","action","type","parseInt","value","Timer","timer","useImperativeHandle","start","stop","toggle","getRemaining","toString","padStart","StartGameButton","startGame","show","relay","bind","setState","gameIntroduction","createRef","Game","NavButton","history","useHistory","push","goto","title","Score","scoreWorst","scoreBad","scoreGood","scoreBest","reset","require","timerRef","GameEngine","useReducer","dispatchPoints","dispatchRounds","roundList","useMemo","setQuestion","setRound","useQuestion","getQuestion","setNextRound","StartGame","Provider","App","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac69a9e9.chunk.js","sourcesContent":["let config = {\r\n  'timer': 20,\r\n  'round': 10\r\n}\r\n\r\nmodule.exports = config;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Typed from 'typed.js';\r\n\r\n\r\nclass TextBlock extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { strings, typeSpeed = 50 } = this.props;\r\n        const options = {\r\n            strings: strings,\r\n            typeSpeed: typeSpeed,\r\n            backSpeed: 50,\r\n            showCursor: true,\r\n            onComplete: (self) => {\r\n                // remove cursor once done typing\r\n                self.cursor.style.display = \"none\";\r\n            }\r\n        };\r\n        this.typed = new Typed(this.el, options);\r\n    }\r\n    componentWillUnmount() {\r\n        this.typed.destroy();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"type-wrap textBlock\">\r\n                <span\r\n                    ref={(el) => { this.el = el; }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TextBlock;","import React from 'react';\r\n\r\nimport TextBlock from \"./TextBlock\";\r\nimport text from \"./text.json\";\r\nfunction Welcome() {\r\n  return (<TextBlock strings={text.welcome} />);\r\n}\r\n\r\n\r\nexport default Welcome;","import * as tf from \"@tensorflow/tfjs\";\r\n\r\nfunction preprocessCanvas(canvas) {\r\n  // Preprocess image for the network\r\n  let tensor = tf\r\n    .fromPixels(canvas) // Shape: (300, 300, 3) - RGB image\r\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\r\n    .mean(2) // Shape: (28, 28) - grayscale\r\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\r\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\r\n    .toFloat(); // Network works with floating points inputs\r\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\r\n}\r\n\r\nexport function getPrediction(theCanvas, model) {\r\n  const tensor = preprocessCanvas(theCanvas.current);\r\n  return model\r\n    .then(loadedModel => loadedModel.predict(tensor).data())\r\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\r\n}\r\n\r\n// Array shuffle\r\n// From https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport function CreateRoundList(size) {\r\n  var list = new Array(size);\r\n  for (var i = 0; i < size; i += 1) {\r\n    list[i] = i;\r\n  }\r\n  list = shuffle(list);\r\n  return list;\r\n}","import React, { useEffect } from 'react';\r\nimport { getPrediction } from './helpers';\r\n\r\nconst Canvas = React.forwardRef((props, ref) => {\r\n  let mouseDown = false;\r\n  let lastX;\r\n  let lastY;\r\n\r\n\r\n  function drawLine(canvas, x, y, lastX, lastY) {\r\n    let context = canvas.getContext(\"2d\");\r\n\r\n    context.strokeStyle = \"#000000\";\r\n    context.lineWidth = 12;\r\n    context.lineJoin = \"round\";\r\n\r\n    context.beginPath();\r\n    context.moveTo(lastX, lastY);\r\n    context.lineTo(x, y);\r\n    context.closePath();\r\n    context.stroke();\r\n\r\n    return [x, y];\r\n  }\r\n\r\n  const handleMouseup = () => {\r\n    mouseDown = false;\r\n    [lastX, lastY] = [undefined, undefined];\r\n    getPrediction(ref, props.model).then(prediction => {\r\n      let newPrediction = props.labels[prediction[0]];\r\n      props.win(newPrediction);\r\n    });\r\n  };\r\n\r\n  const handleMousemove = e => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    if (mouseDown) {\r\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\r\n    }\r\n  };\r\n\r\n  const clearCanvasButton = e => {\r\n    const canvas = ref.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const canvas = ref.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    context.fillStyle = \"#ffffff\";\r\n    context.fillRect(0, 0, canvas.height, canvas.width);\r\n  });\r\n\r\n  return (\r\n    <div className='canvasContainer'>\r\n      <canvas\r\n        height='300px'\r\n        width='300px'\r\n        ref={ref}\r\n        onMouseDown={() => (mouseDown = true)}\r\n        onMouseUp={handleMouseup}\r\n        onMouseMove={e => handleMousemove(e)}\r\n      />\r\n      <button className=\"clearCanvas\" onClick={clearCanvasButton} >\r\n        Clear the canvas.\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Canvas;","import React from 'react';\r\n\r\nconst GameContext = React.createContext(null);\r\n\r\nexport default GameContext;","import React from 'react';\r\nimport GameContext from \"./GameContext\";\r\nimport text from \"./text.json\";\r\nimport config from './config';\r\n\r\nfunction GameText(props) {\r\n\r\n  function startsWithVowel(testStr) {\r\n    var vowelRegex = '^[aieouAIEOU].*'\r\n    var matched = testStr.match(vowelRegex)\r\n    return matched;\r\n  }\r\n\r\n  return (\r\n    <GameContext.Consumer>\r\n      {({ points, round }) => round > 0 && (\r\n        <div className=\"gameText\">\r\n          <p>Round {round} of {config.round}</p>\r\n          <p>Points: {points}</p>\r\n          <p>{[text.draw.replace('[formatedQuestion]', ((startsWithVowel(props.question)) ? 'an ' : 'a ') + props.question.toUpperCase())]}</p>\r\n        </div>\r\n      )}\r\n    </GameContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default GameText;","import { useMemo, useState, useEffect } from 'react';\r\nimport { CreateRoundList } from './helpers';\r\nconst genericReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'increment':\r\n      return { count: state.count + 1 };\r\n    case 'decrement':\r\n      return { count: state.count - 1 };\r\n    case 'add':\r\n      return { count: state.count + parseInt(action.value) };\r\n    case 'reset':\r\n      return { count: 0 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction useTimer(max, timeUp) {\r\n  const [count, setCount] = useState(max);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  function tick() {\r\n    if (count < 1) {\r\n      setIsActive(false);\r\n      timeUp();\r\n    }\r\n    else if (count <= 0) {\r\n      setCount(max)\r\n    }\r\n    else {\r\n      setCount(count - 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    var intervalID = null;\r\n    if (isActive) {\r\n      intervalID = setInterval(() => tick(), 1000);\r\n\r\n    }\r\n    else if (!isActive && count !== 0) {\r\n      clearInterval(intervalID);\r\n    }\r\n    return () => clearInterval(intervalID);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isActive, count]);\r\n\r\n  return { count, setCount, isActive, setIsActive };\r\n}\r\n\r\nfunction useQuestion(labels, size = 10) {\r\n\r\n  const roundList = useMemo(() => CreateRoundList(size), [size]);\r\n  const [question, setQuestion] = useState(null);\r\n  const [round, setRound] = useState(0);\r\n\r\n  function nextRound() {\r\n    let nextRound = (round === size) ? 0 : round + 1;\r\n    setRound(nextRound);\r\n  }\r\n  useEffect(() => {\r\n    setQuestion(labels[roundList[round]]);\r\n  }, [round, labels, roundList]);\r\n\r\n  return [question, nextRound];\r\n}\r\n\r\nexport { useTimer, useQuestion };\r\nexport default genericReducer;","import React from 'react';\r\n\r\nimport { useTimer } from './hooks';\r\n\r\n\r\nconst Timer = React.forwardRef((props, ref) => {\r\n\r\n  const timer = useTimer(props.max, props.timeUp);\r\n\r\n  // let Game.js access the functions of this timer component\r\n  React.useImperativeHandle(ref, () => ({\r\n    start: () => {\r\n      timer.setCount(props.max);\r\n      timer.setIsActive(true);\r\n    },\r\n    stop: () => {\r\n      timer.setIsActive(false);\r\n    },\r\n    toggle: () => {\r\n      timer.setIsActive(!timer.isActive);\r\n    },\r\n    getRemaining: () => {\r\n      return timer.count;\r\n    }\r\n  }));\r\n\r\n  if (timer.isActive) {\r\n    return (<div>{\"Time left: \" + timer.count.toString().padStart(props.max.toString().length, '0')}</div>);\r\n  }\r\n  else {\r\n    return (<div></div>);\r\n  }\r\n\r\n});\r\n\r\nexport default Timer;\r\nexport { useTimer };","import React from 'react';\r\nimport TextBlock from './TextBlock';\r\nimport text from './text.json';\r\n\r\nclass StartGameButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startGame: props.startGame,\r\n      show: true\r\n    };\r\n    this.relay = this.relay.bind(this);\r\n  }\r\n\r\n  relay() {\r\n    this.setState({\r\n      show: false\r\n    });\r\n    this.state.startGame();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.show &&\r\n          <div>\r\n            <div className=\"top\">\r\n              <TextBlock strings={[text.gameIntroduction]} />\r\n            </div>\r\n            <div className=\"bottom\">\r\n              <button className='startGameButton' onClick={this.relay}>Start Game</button>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default StartGameButton;","import React from 'react';\r\n\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport GameText from \"./GameText\";\r\nimport Timer from \"./Timer\";\r\nimport StartGameButton from \"./StartGameButton\";\r\nimport './Game.css';\r\nimport config from './config';\r\n\r\nconst ref = React.createRef();\r\nfunction Game(props) {\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"left\">\r\n          <Canvas ref={ref}\r\n            model={props.model}\r\n            labels={props.labels}\r\n            win={props.win} />\r\n        </div>\r\n        <div className=\"right\">\r\n          <GameText question={props.question}/>\r\n          <Timer max={config.timer} ref={props.timer} timeUp={props.timeUp} />\r\n          <StartGameButton startGame={props.startGame}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction NavButton(props) {\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <button className={props.className}\r\n      type=\"button\"\r\n      onClick={() => history.push('/' + props.goto)}\r\n    >\r\n      {props.title}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default NavButton;","import React from 'react';\r\n\r\nimport GameContext from \"./GameContext\";\r\nimport TextBlock from \"./TextBlock\";\r\nimport NavButton from \"./NavButton\";\r\nimport config from \"./config\";\r\nimport text from \"./text.json\";\r\n\r\nfunction Score(props) {\r\n  return (\r\n    <div>\r\n      <GameContext.Consumer>\r\n        {({ points, round }) => (\r\n          (points === config.round * -3 && <TextBlock strings={[text.scoreWorst.replace('[points]', points)]} />) ||\r\n          (points > config.round * -3 && points < 0 && <TextBlock strings={[text.scoreBad.replace('[points]', points)]} />) ||\r\n          (points > 0 && points < round * config.timer && <TextBlock strings={[text.scoreGood.replace('[points]', points)]} />) ||\r\n          (points === round * config.timer && <TextBlock strings={[text.scoreBest]} />)\r\n        )}\r\n      </GameContext.Consumer>\r\n      <NavButton title='Home' goto='' />\r\n      <button className='newGame' onClick={() => props.reset()}>New Game</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Score;","import React, { useState, useEffect, useReducer } from 'react';\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nimport Game from \"./Game\";\r\nimport Score from \"./Score\";\r\nimport GameContext from \"./GameContext\";\r\nimport genericReducer, { useQuestion } from \"./hooks\";\r\nimport config from './config';\r\n\r\nconst model = tf.loadModel(\"./model/model.json\");\r\nconst labels = require(\"./labels.json\");\r\nconst timerRef = React.createRef();\r\n\r\nfunction GameEngine() {\r\n\r\n  const [points, dispatchPoints] = useReducer(genericReducer, { count: 0 });\r\n  const [round, dispatchRounds] = useReducer(genericReducer, { count: 0 });\r\n  const [state, setState] = useState({ round: 0, points: 0 });\r\n  const [getQuestion, setNextRound] = useQuestion(labels);\r\n\r\n  useEffect(() => {\r\n    setState({ round: round.count, points: points.count })\r\n  }, [points, round]);\r\n\r\n  function StartGame() {\r\n    dispatchRounds({ type: 'increment' });\r\n    if (round.count >= config.round) {\r\n    } else {\r\n\r\n      timerRef.current.start();\r\n    }\r\n  }\r\n\r\n  function TimeUp() {\r\n    dispatchPoints({ type: 'add', value: -3 });\r\n    setNextRound();\r\n    StartGame();\r\n  }\r\n  function Win(newPrediction) {\r\n    if (round.count > 0 && newPrediction === getQuestion) {\r\n      dispatchPoints({ type: 'add', value: timerRef.current.getRemaining() });\r\n      setNextRound();\r\n      StartGame();\r\n    }\r\n  }\r\n  function Reset() {\r\n    dispatchPoints({ type: 'reset' });\r\n    dispatchRounds({ type: 'reset' });\r\n    setState({round:0, points:0});\r\n    setNextRound();\r\n  }\r\n\r\n  if (round.count <= config.round) {\r\n    return (\r\n      <div>\r\n        <GameContext.Provider value={state} >\r\n          <Game model={model} labels={labels} timer={timerRef} timeUp={TimeUp} win={Win} question={getQuestion} startGame={StartGame} />\r\n        </GameContext.Provider>\r\n      </div>\r\n    );\r\n\r\n  }\r\n  else {\r\n    return (\r\n      <div>\r\n        <GameContext.Provider value={state} >\r\n          <Score reset={Reset} />\r\n        </GameContext.Provider>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default GameEngine;","import React from \"react\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport Welcome from './Welcome';\r\nimport GameEngine from './GameEngine';\r\nimport NavButton from './NavButton';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <Router >\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Welcome />\r\n            <NavButton className='newGame' title='Start' goto='game' />\r\n          </Route>\r\n          <Route path=\"/game\">\r\n            <GameEngine />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}